name: CD

on:
  push:
    branches: [master, main]
    tags: ["v*"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full check
        run: npm run check

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist/ deploy/
          cp package*.json deploy/
          cp -r node_modules/ deploy/
          tar -czf deployment.tar.gz -C deploy .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/express-typescript-boilerplate
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Example deployment to staging/production
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [deploy, docker]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Deploy to AWS ECS, Heroku, or other cloud services
          # - Use SSH to deploy to your servers
          # - Update Kubernetes deployments

          # Example for SSH deployment:
          # echo "${{ secrets.STAGING_SSH_KEY }}" > staging_key
          # chmod 600 staging_key
          # scp -i staging_key deployment.tar.gz user@staging-server:/path/to/deploy/
          # ssh -i staging_key user@staging-server "cd /path/to/deploy && tar -xzf deployment.tar.gz && pm2 restart app"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This should only run on tagged releases (v1.0.0, v1.0.1, etc.)

          # Example for production deployment:
          # echo "${{ secrets.PRODUCTION_SSH_KEY }}" > prod_key
          # chmod 600 prod_key
          # scp -i prod_key deployment.tar.gz user@prod-server:/path/to/deploy/
          # ssh -i prod_key user@prod-server "cd /path/to/deploy && tar -xzf deployment.tar.gz && pm2 restart app"
